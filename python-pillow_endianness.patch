diff --git a/Tests/test_image_array.py b/Tests/test_image_array.py
index c2e8590..351621d 100644
--- a/Tests/test_image_array.py
+++ b/Tests/test_image_array.py
@@ -10,8 +10,8 @@ def test(mode):
         return ai["shape"], ai["typestr"], len(ai["data"])
     # assert_equal(test("1"), ((100, 128), '|b1', 1600))
     assert_equal(test("L"), ((100, 128), '|u1', 12800))
-    assert_equal(test("I"), ((100, 128), '<i4', 51200)) # FIXME: wrong?
-    assert_equal(test("F"), ((100, 128), '<f4', 51200)) # FIXME: wrong?
+    assert_equal(test("I"), ((100, 128), Image._ENDIAN + 'i4', 51200)) # FIXME: wrong?
+    assert_equal(test("F"), ((100, 128), Image._ENDIAN + 'f4', 51200)) # FIXME: wrong?
     assert_equal(test("RGB"), ((100, 128, 3), '|u1', 38400))
     assert_equal(test("RGBA"), ((100, 128, 4), '|u1', 51200))
     assert_equal(test("RGBX"), ((100, 128, 4), '|u1', 51200))
diff --git a/Tests/test_lib_pack.py b/Tests/test_lib_pack.py
index 5bf622c..b3355b6 100644
--- a/Tests/test_lib_pack.py
+++ b/Tests/test_lib_pack.py
@@ -18,6 +18,8 @@ def pack(mode, rawmode):
         else:
             return [ord(c) for c in im.tobytes("raw", rawmode)]
 
+    order = 1 if Image._ENDIAN == '<' else -1
+
     assert_equal(pack("1", "1"), [128])
     assert_equal(pack("1", "1;I"), [0])
     assert_equal(pack("1", "1;R"), [1])
@@ -25,9 +27,9 @@ def pack(mode, rawmode):
 
     assert_equal(pack("L", "L"), [1])
 
-    assert_equal(pack("I", "I"), [1, 0, 0, 0])
+    assert_equal(pack("I", "I"), [1, 0, 0, 0][::order])
 
-    assert_equal(pack("F", "F"), [0, 0, 128, 63])
+    assert_equal(pack("F", "F"), [0, 0, 128, 63][::order])
 
     assert_equal(pack("LA", "LA"), [1, 2])
 
diff --git a/Tests/test_mode_i16.py b/Tests/test_mode_i16.py
index 584bdd9..4c17985 100644
--- a/Tests/test_mode_i16.py
+++ b/Tests/test_mode_i16.py
@@ -84,10 +84,12 @@ def test_tobytes():
     def tobytes(mode):
         return Image.new(mode, (1, 1), 1).tobytes()
 
+    order = 1 if Image._ENDIAN == '<' else -1
+
     assert_equal(tobytes("L"), b"\x01")
     assert_equal(tobytes("I;16"), b"\x01\x00")
     assert_equal(tobytes("I;16B"), b"\x00\x01")
-    assert_equal(tobytes("I"), b"\x01\x00\x00\x00")
+    assert_equal(tobytes("I"), b"\x01\x00\x00\x00"[::order])
 
 
 def test_convert():
